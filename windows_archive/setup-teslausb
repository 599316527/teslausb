#!/bin/bash -eu

BRANCH=u/cimryan/readonlyrootfs

if ! [ $(id -u) = 0 ]
then
  echo "STOP: Run sudo -i."
  exit 1
fi

function check_variable () {
  local var_name="$1"
  if [ -z "${!var_name+x}" ]
  then
    echo "STOP: Define the variable $var_name like this: export $var_name=value"
    exit 1
  fi
}

function check_archive_server_reachable () {
  echo "Verifying that the archive server $archiveserver is reachable..."
  local serverunreachable=false
  ping -c 1 -w 1 "$archiveserver" 1>/dev/null 2>&1 || serverunreachable=true
  
  if [ "$serverunreachable" = true ]
  then
    echo "STOP: The archive server $archiveserver is unreachable. Try specifying its IP address instead."
    exit 1
  fi
  
  echo "The archive server is reachable."
}

function check_available_space () {
  echo "Verifying that there is sufficient space available on the MicroSD card..."
  local available_space="$1"
  if [ "$available_space" -lt  4294967296 ]
  then
    echo "STOP: The MicroSD card is too small."
    exit 1
  fi
  
  echo "There is sufficient space available."
}

function fix_cmdline_txt_modules_load () 
{
  echo "Fixing the modules-load parameter in /boot/cmdline.txt..."
  cp /boot/cmdline.txt ~
  cat ~/cmdline.txt | sed 's/[[:space:]]\+modules-load=[^ [:space:]]\+//' | sed 's/rootwait/rootwait modules-load=dwc2/' > /boot/cmdline.txt
  rm ~/cmdline.txt
  echo "Fixed cmdline.txt."
}

BACKINGFILES_MOUNTPOINT=/backingfiles

function create_usb_drive_backing_files () {
  wget https://raw.githubusercontent.com/cimryan/teslausb/"$BRANCH"/windows_archive/create-backingfiles-partition.sh
  chmod +x ./create-backingfiles-partition.sh
  ./create-backingfiles-partition.sh "$BACKINGFILES_MOUNTPOINT"
  
  echo "Mounting the partition for the backing files..."
  mount /backingfiles
  echo "Mounted the partition for the backing files."
  
  wget https://raw.githubusercontent.com/cimryan/teslausb/"$BRANCH"/windows_archive/create-backingfiles.sh
  chmod +x ./create-backingfiles.sh
  ./create-backingfiles.sh "$AVAILABLE_SPACE" "$campercent" "$BACKINGFILES_MOUNTPOINT" 
}

function configure_archive () {
  echo "Configuring the archive..."
  mkdir /mnt/archive
  local archive_server_ip_address="$(getent hosts $archiveserver | cut -d' ' -f1)"
  echo "//$archive_server_ip_address/$sharename /mnt/archive cifs vers=3,credentials=/root/.teslaCamArchiveCredentials,iocharset=utf8,file_mode=0777,dir_mode=0777 0" >> /etc/fstab
  
  echo "username=$shareuser" > /root/.teslaCamArchiveCredentials
  echo "password=$sharepassword" >> /root/.teslaCamArchiveCredentials
  echo "Configured the archive."
}

function configure_archive_scripts () {
  echo "Configuring the archive scripts..."
  mkdir /root/bin
  
  wget https://raw.githubusercontent.com/cimryan/teslausb/"$BRANCH"/windows_archive/archiveloop
  sed s/ARCHIVE_HOST_NAME=archiveserver/ARCHIVE_HOST_NAME=$archiveserver/ ~/archiveloop > /root/bin/archiveloop
  rm ~/archiveloop
  chmod +x /root/bin/archiveloop
  
  pushd /root/bin
  wget https://raw.githubusercontent.com/cimryan/teslausb/"$BRANCH"/windows_archive/archive-teslacam-clips
  chmod +x archive-teslacam-clips
  popd
  echo "Configured the archive scripts."
}

function configure rc_local () {
  echo "Configuring /etc/rc.local to run the archive scripts at startup..."
  echo "#!/bin/bash -eu" > ~/rc.local
  tail -n +2 /etc/rc.local | sed '$d' >> ~/rc.local
cat << 'EOF' >> ~/rc.local
LOGFILE=/tmp/rc.local.log

function log () {
  echo "$( date )" >> "$LOGFILE"
  echo "$1" >> "$LOGFILE"
}

log "Launching archival script..."
/root/bin/archiveloop &
log "All done"
exit 0
EOF

  cat ~/rc.local > /etc/rc.local
  rm ~/rc.local
  echo "Configured rc.local."
}

function configure_hostname () {
  echo "Configuring the hostname..."
  
  local new_host_name="teslausb"
  cp /etc/hosts ~
  sed 's/raspberrypi/$new_host_name/g' ~/hosts > /etc/hosts
  
  cp /etc/hostname ~
  sed 's/raspberrypi/$new_host_name/g' ~/hostname > /etc/hostname
  echo "Configured the hostname."
}

echo "Verifying environment variables..."

check_variable "archiveserver"
check_variable "sharename"
check_variable "shareuser"
check_variable "sharepassword"
check_variable "campercent"

check_archive_server_reachable

AVAILABLE_SPACE="$( parted -m /dev/mmcblk0 u b print free | tail -1 | cut -d ":" -f 4 | sed 's/B//g' )"
check_available_space "$AVAILABLE_SPACE"


pushd ~

fix_cmdline_txt_modules_load

echo "" >> /etc/fstab

create_usb_drive_backing_files

configure_archive

configure_archive_scripts

configure rc_local

configure_hostname